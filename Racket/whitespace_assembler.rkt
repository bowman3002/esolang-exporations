#lang racket

(require "whitespace_converter.rkt")

(define (number->whitespacechar number)
  (define (binary->whitespacechar binary)
    (if (= binary 0)
        #\s
        #\t))
  (define (number->whitespacechar-rec number char-list)
    (if (= number 0)
        char-list
        (number->whitespacechar-rec (quotient number 2) (cons (binary->whitespacechar (remainder number 2)) char-list))))
  (if (< number 0)
      (cons #\t (number->whitespacechar-rec (abs number) '()))
      (cons #\s (number->whitespacechar-rec number '()))))

(define (assembly->whitespacechars command)
  (cond ((eq? command "dup")
         '(#\s #\l #\s))
        ((eq? command "swp")
         '(#\s #\n #\t))
        ((eq? command "dis")
         '(#\s #\n #\n))
        ((eq? command "add")
         '(#\t #\s #\s #\s))
        ((eq? command "sub")
         '(#\t #\s #\s #\t))
        ((eq? command "mul")
         '(#\t #\s #\s #\n))
        ((eq? command "div")
         '(#\t #\s #\t #\s))
        ((eq? command "mod")
         '(#\t #\s #\t #\t))
        ((eq? command "str")
         '(#\t #\t #\s))
        ((eq? command "rtr")
         '(#\t #\t #\t))
        ((eq? command "ret")
         '(#\n #\t #\n))
        ((eq? command "end")
         '(#\n #\n #\n))
        ((eq? command "pch")
         '(#\t #\n #\s #\s))
        ((eq? command "pnm")
         '(#\t #\n #\s #\t))
        ((eq? command "rch")
         '(#\t #\n #\t #\s))
        ((eq? command "rnm")
         '(#\t #\n #\t #\t))
        (else
         (assembly-arg->whitespacechars command))))

(define (assembly-arg->whitespacechars command-with-arg)
  (let* ((split-command (string-split command-with-arg " "))
         (command (list-ref split-command 0))
         (arg (number->whitespacechar (string->number (list-ref split-command 1)))))
    (cond ((equal? command "lbl")
           `(#\n #\s #\s . ,arg))
          ((equal? command "cal")
           `(#\n #\s #\t . ,arg))
          ((equal? command "jmp")
           `(#\n #\s #\n . ,arg))
          ((equal? command "jez")
           `(#\n #\t #\s . ,arg))
          ((equal? command "jng")
           `(#\n #\t #\t . ,arg))
          ((equal? command "psh")
           `(#\s #\s . ,arg))
          (else #f))))